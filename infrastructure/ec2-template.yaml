AWSTemplateFormatVersion: "2010-09-09"
Description: SSM接続可能な、EC2を作成するテンプレートです。

# CSVに具体的なデータを定義するため、ここでは関数で受け皿を作る
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
  AmiId:
    Type: AWS::EC2::Image::Id
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id

# EC2のIAMロールを定義
# EC2→SSMでアクセス出来る様にする（SSM→EC2という通信の流れを想像するが、EC2からの返答もあるため）
Resources:
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EC2Role-for-${AWS::StackName}" # stack名を使って被らない名前にできる
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  # EC2には直でIAMロールを割り当てられない。一枚インスタンスプロファイルを挟む必要がある
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "EC2Profile-for-${AWS::StackName}"
      Roles:
        - !Ref EC2InstanceRole

  # セキュリティグループはデフォルト設定
  # SGのデフォルト設定は、インバウンド全て拒否、アウトバウンド全て許可
  # つまりこの設定だけで、SSMのみ接続可能
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EC2のセキュリティグループ"
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "sg-for-${AWS::StackName}"

  # ここでEC2の物体を作る
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref MySecurityGroup
      # ↓↓↓ 作成したIAMインスタンスプロファイルをEC2に関連付ける ↓↓↓
      IamInstanceProfile: !Ref EC2InstanceProfile

Outputs:
  InstanceId:
    Description: インスタンスID
    Value: !Ref MyEC2Instance