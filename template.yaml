AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Step Functions を使用して、S3にアップロードされたCSVに基づきEC2を非同期でプロビジョニングするオーケストレーション

Globals:
  Function:
    Runtime: python3.11
    MemorySize: 256
    Architectures:
      - x86_64

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, staging, prod]
    Default: dev
  RetentionDays:
    Type: Number
    Default: 30
    Description: "S3バケットのオブジェクト保持期間(日数)"

Resources:
  # ------------------------------------------------------------
  #  1. ネットワーク & S3 & SSMドキュメント (ここはほぼ変更なし)
  # ------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "vpc-${AWS::StackName}"
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "subnet-${AWS::StackName}"
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for VPC Endpoints"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt VPC.CidrBlock
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    # (以下、Endpoint定義は変更ないので省略)
  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    # (以下、Endpoint定義は変更ないので省略)
  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    # (以下、Endpoint定義は変更ないので省略)

  CsvBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "csv-to-ec2-data-${AWS::AccountId}-${AWS::Region}"
      # (以下、S3のプロパティは変更ないので省略)

  DockerInstallSsmDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub "DockerInstallScript-${AWS::StackName}"
      DocumentType: Command
      Content:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./ssm-documents/install-docker.yaml

  # ------------------------------------------------------------
  #  2. CloudFormationがEC2を作成するためのIAMロール (変更なし)
  # ------------------------------------------------------------
  CfnServiceRole:
    Type: AWS::IAM::Role
    Properties:
      # IAM RoleNameは自動生成に任せるのがベストプラクティス
      # RoleName: !Sub "CfnServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # (ポリシー内容は変更なし)

  # ------------------------------------------------------------
  #  3. Step Functions と、それが使うLambda関数・IAMロール
  # ------------------------------------------------------------

  # Step Functions から呼び出されるLambda (インスタンスID取得用)
  GetStackOutputFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "GetStackOutputFunction-${AWS::StackName}"
      CodeUri: src/get_stack_output/
      Handler: app.lambda_handler
      Timeout: 10
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cloudformation:DescribeStacks
              Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/ec2-*/*"

  # Step Functions の本体
  Ec2ProvisioningStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "Ec2ProvisioningStateMachine-${AWS::StackName}"
      Type: STANDARD
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        CfnServiceRoleArn: !GetAtt CfnServiceRole.Arn
        Ec2TemplateUrl: !Sub "https://s3.${AWS::Region}.amazonaws.com/${CsvBucket}/ec2-template.yaml"
        GetStackOutputFunctionArn: !GetAtt GetStackOutputFunction.Arn
        SsmDocumentName: !Ref DockerInstallSsmDocument
        VpcId: !Ref VPC
        SubnetId: !Ref PrivateSubnet
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "cloudformation:CreateStack"
                - "cloudformation:UpdateStack"
                - "cloudformation:DescribeStacks"
              Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/ec2-*/*"
            - Effect: Allow
              Action:
                - "ssm:SendCommand"
              Resource:
                - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${DockerInstallSsmDocument}"
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource: !GetAtt GetStackOutputFunction.Arn
            - Effect: Allow # CloudFormationにIAMロールを渡すために必要
              Action: "iam:PassRole"
              Resource: !GetAtt CfnServiceRole.Arn

  # S3トリガーでStep Functionsを起動するLambda
  StartWorkflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "StartWorkflowFunction-${AWS::StackName}"
      CodeUri: src/start_workflow/
      Handler: app.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref Ec2ProvisioningStateMachine
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref CsvBucket
        - Statement:
            - Effect: Allow
              Action: "states:StartExecution"
              Resource: !Ref Ec2ProvisioningStateMachine
      Events:
        CsvUpload:
          Type: S3
          Properties:
            Bucket: !Ref CsvBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv

Outputs:
  StateMachineArn:
    Description: "ARN of the EC2 Provisioning State Machine"
    Value: !Ref Ec2ProvisioningStateMachine
  CsvBucketName:
    Description: "CSVファイルをアップロードするS3バケット名"
    Value: !Ref CsvBucket